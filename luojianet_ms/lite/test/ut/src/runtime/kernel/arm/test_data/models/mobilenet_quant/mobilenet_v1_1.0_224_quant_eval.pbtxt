node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 224
        }
        dim {
          size: 224
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_0/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_0/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_0/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_0/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_0/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_0/weights"
  input: "MobilenetV1/Conv2d_0/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/Conv2D"
  op: "Conv2D"
  input: "input"
  input: "MobilenetV1/Conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_0/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_0/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_0/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_0/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_0/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_0/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_0/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_0/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_0/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_0/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/Conv2D"
  input: "MobilenetV1/Conv2d_0/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_0/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_1_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_1_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_1_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_1_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_1_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_1_pointwise/weights"
  input: "MobilenetV1/Conv2d_1_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_1_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_1_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_2_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_2_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_2_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_2_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_2_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_2_pointwise/weights"
  input: "MobilenetV1/Conv2d_2_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_2_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_2_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_3_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_3_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_3_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_3_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_3_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_3_pointwise/weights"
  input: "MobilenetV1/Conv2d_3_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_3_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_3_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_4_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_4_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_4_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_4_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_4_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_4_pointwise/weights"
  input: "MobilenetV1/Conv2d_4_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_4_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_4_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_5_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_5_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_5_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_5_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_5_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_5_pointwise/weights"
  input: "MobilenetV1/Conv2d_5_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_5_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_5_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_6_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_6_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_6_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_6_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_6_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_6_pointwise/weights"
  input: "MobilenetV1/Conv2d_6_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_6_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_6_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_7_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_7_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_7_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_7_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_7_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_7_pointwise/weights"
  input: "MobilenetV1/Conv2d_7_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_7_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_7_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_8_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_8_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_8_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_8_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_8_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_8_pointwise/weights"
  input: "MobilenetV1/Conv2d_8_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_8_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_8_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_9_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_9_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_9_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_9_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_9_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_9_pointwise/weights"
  input: "MobilenetV1/Conv2d_9_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_9_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_9_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_10_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_10_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_10_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_10_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_10_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_10_pointwise/weights"
  input: "MobilenetV1/Conv2d_10_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_10_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_10_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_11_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_11_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_11_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_11_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_11_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_11_pointwise/weights"
  input: "MobilenetV1/Conv2d_11_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_11_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_11_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_12_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_12_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_12_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_12_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_12_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_12_pointwise/weights"
  input: "MobilenetV1/Conv2d_12_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_12_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_12_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\004\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 1024
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
  input: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\004\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\004\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Conv2d_13_pointwise/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_13_pointwise/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Conv2d_13_pointwise/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Conv2d_13_pointwise/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Conv2d_13_pointwise/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1024
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_13_pointwise/weights"
  input: "MobilenetV1/Conv2d_13_pointwise/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_13_pointwise/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Conv2d_13_pointwise/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Conv2D"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.000300000014249
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6"
  op: "Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/add_fold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Logits/AvgPool_1a/AvgPool"
  op: "AvgPool"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 7
        i: 7
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Dropout_1b/Identity"
  op: "Identity"
  input: "MobilenetV1/Logits/AvgPool_1a/AvgPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\004\000\000\351\003\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900000035763
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Initializer/truncated_normal/mul"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1024
        }
        dim {
          size: 1001
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Assign"
  op: "Assign"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/read"
  op: "Identity"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/biases/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1001
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/biases/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/biases/Initializer/zeros"
  op: "Fill"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/biases/Initializer/zeros/shape_as_tensor"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/biases/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/biases"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1001
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/biases/Assign"
  op: "Assign"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/biases"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/biases/read"
  op: "Identity"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/biases"
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/Conv2D"
  op: "Conv2D"
  input: "MobilenetV1/Logits/Dropout_1b/Identity"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/BiasAdd"
  op: "BiasAdd"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/Conv2D"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MobilenetV1/Logits/SpatialSqueeze"
  op: "Squeeze"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
        i: 2
      }
    }
  }
}
node {
  name: "MobilenetV1/Predictions/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\351\003\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/Predictions/Reshape"
  op: "Reshape"
  input: "MobilenetV1/Logits/SpatialSqueeze"
  input: "MobilenetV1/Predictions/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Predictions/Softmax"
  op: "Softmax"
  input: "MobilenetV1/Predictions/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/Predictions/Shape"
  op: "Shape"
  input: "MobilenetV1/Logits/SpatialSqueeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/Predictions/Reshape_1"
  op: "Reshape"
  input: "MobilenetV1/Predictions/Softmax"
  input: "MobilenetV1/Predictions/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_0/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_0/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_0/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/Conv2D_Fold"
  op: "Conv2D"
  input: "input"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_1_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_1_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_1_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_2_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_2_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_2_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_3_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_3_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_3_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_4_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_4_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_4_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_5_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_5_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_5_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_6_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_6_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_6_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_7_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_7_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_7_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_8_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_8_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_8_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_9_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_9_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_9_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_10_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_10_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_10_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_11_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_11_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_11_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_12_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_12_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_12_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/scale_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/scale_reshape"
  op: "Reshape"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/mul"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/scale_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_13_depthwise/depthwise_weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/scale_reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise_Fold/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\004\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise_Fold/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise_Fold"
  op: "DepthwiseConv2dNative"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/add"
  op: "Add"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_variance/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/Rsqrt"
  op: "Rsqrt"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/mul"
  op: "Mul"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/gamma/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/mul_1"
  op: "Mul"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/moving_mean/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/bias"
  op: "Sub"
  input: "MobilenetV1/Conv2d_13_pointwise/BatchNorm/beta/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/mul_fold"
  op: "Mul"
  input: "MobilenetV1/Conv2d_13_pointwise/weights/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Conv2D_Fold"
  op: "Conv2D"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/add_fold"
  op: "Add"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Conv2D_Fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/BatchNorm_Fold/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_0/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/mul_fold"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/min"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/max"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/min/read"
  input: "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/min"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/max"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights/read"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/min/read"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/weights_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: true
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/min/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/min"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/min"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/min"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/min/Assign"
  op: "Assign"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/min"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/min/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/min"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/min/read"
  op: "Identity"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/min"
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/max/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 6.0
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/max"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/max"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/max/Assign"
  op: "Assign"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/max"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/max/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/max"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/max/read"
  op: "Identity"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/max"
      }
    }
  }
}
node {
  name: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/FakeQuantWithMinMaxVars"
  op: "FakeQuantWithMinMaxVars"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/BiasAdd"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/min/read"
  input: "MobilenetV1/Logits/Conv2d_1c_1x1/act_quant/max/read"
  attr {
    key: "narrow_range"
    value {
      b: false
    }
  }
  attr {
    key: "num_bits"
    value {
      i: 8
    }
  }
}
versions {
  producer: 26
}
