/**
 * Copyright 2020 Huawei Technologies Co., Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mindspore.dataset;

import "gnn_tensor.proto";

message GnnClientRegisterRequestPb {
  int32 pid = 1;
}

message GnnFeatureInfoPb {
  int32 type = 1;
  TensorPb feature = 2;
}

message GnnClientRegisterResponsePb {
  string error_msg = 1;
  string data_schema = 2;
  int64 shared_memory_key = 3;
  int64 shared_memory_size = 4;
  repeated GnnFeatureInfoPb default_node_feature = 5;
  repeated GnnFeatureInfoPb default_edge_feature = 6;
}

message GnnClientUnRegisterRequestPb {
  int32 pid = 1;
}

message GnnClientUnRegisterResponsePb {
  string error_msg = 1;
}

enum GnnOpName {
  GET_ALL_NODES = 0;
  GET_ALL_EDGES = 1;
  GET_NODES_FROM_EDGES = 2;
  GET_EDGES_FROM_NODES = 3;
  GET_ALL_NEIGHBORS = 4;
  GET_SAMPLED_NEIGHBORS = 5;
  GET_NEG_SAMPLED_NEIGHBORS = 6;
  RANDOM_WALK = 7;
  GET_NODE_FEATURE = 8;
  GET_EDGE_FEATURE = 9;
}

message GnnRandomWalkPb {
  float p = 1;
  float q = 2;
  int32 default_id = 3;
}

message IdPairPb {
  int32 src_id = 1;
  int32 dst_id = 2;
}

message GnnGraphDataRequestPb {
  GnnOpName op_name = 1;
  repeated int32 id = 2; // node id or edge id
  repeated int32 type = 3; //node type or edge type or neighbor type or feature type
  repeated int32 number = 4; // samples number
  TensorPb id_tensor = 5; // input ids ,node id or edge id
  GnnRandomWalkPb random_walk = 6;
  int32 strategy = 7;
  repeated IdPairPb node_pair = 8;
  int32 format = 9; // output format for GET_ALL_NEIGHBORS function
}

message GnnGraphDataResponsePb {
  string error_msg = 1;
  repeated TensorPb result_data = 2;
}

message GnnMetaInfoRequestPb {

}

message GnnNodeEdgeInfoPb {
  int32 type = 1;
  int32 num = 2;
}

message GnnMetaInfoResponsePb {
  string error_msg = 1;
  repeated GnnNodeEdgeInfoPb node_info = 2;
  repeated GnnNodeEdgeInfoPb edge_info = 3;
  repeated int32 node_feature_type = 4;
  repeated int32 edge_feature_type = 5;
}

service GnnGraphData {
  rpc ClientRegister(GnnClientRegisterRequestPb) returns (GnnClientRegisterResponsePb);
  rpc ClientUnRegister(GnnClientUnRegisterRequestPb) returns (GnnClientUnRegisterResponsePb);
  rpc GetGraphData(GnnGraphDataRequestPb) returns (GnnGraphDataResponsePb);
  rpc GetMetaInfo(GnnMetaInfoRequestPb) returns (GnnMetaInfoResponsePb);
}
