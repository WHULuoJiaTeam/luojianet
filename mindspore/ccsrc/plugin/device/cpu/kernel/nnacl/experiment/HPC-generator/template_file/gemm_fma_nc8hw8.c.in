/**
 * Copyright 2021 Huawei Technologies Co., Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <x86intrin.h>

// nnacl gemm in x86 fma intrinsic code
void nnacl_gemm_fma_@{row_block}x@{col_block}_kernel_nc8hw8_fp32(float *dst, const float *src, const float *weight,
                                                                const float *bias, const size_t act_flag, const size_t row_block,
                                                                const size_t col_block, const size_t deep, const size_t src_stride,
                                                                const size_t dst_stride, const size_t inc_flag) {
    @for i in range(0, row_block):
        @for j in range(0, col_block >> 3):
            __m256 dst@{j * row_block + i};
    if (inc_flag) {
        @for i in range(0, row_block):
            @for j in range(0, col_block >> 3):
                dst@{j * row_block + i} = _mm256_load_ps(dst + @{j} * dst_stride + @{i * 8});
    } else if (bias == NULL) {
        @for i in range(0, row_block * col_block >> 3):
            dst@{i} = _mm256_setzero_ps();
    } else {
        @for i in range(0, row_block):
            @for j in range(0, col_block >> 3):
                dst@{j * row_block + i} = _mm256_load_ps(bias + @{j * 8});
    }
    for (int i = 0; i < (deep >> 3); ++i) {
        @for i in range(0, 8):
            // bock@{i}
            @if col_block == 32:
                @for row in range(0, row_block):
                    __m256 src@{row}@{i} = _mm256_set1_ps(*(src + @{row * 8 + i}));
                @for col in range(0, col_block >> 3):
                    __m256 weight@{col}@{i} = _mm256_load_ps(weight + @{col * 8 + i * col_block});
                    @for row in range(0, row_block):
                        dst@{row + col * row_block} = _mm256_fmadd_ps(dst@{row + col * row_block}, src@{row}@{i}, weight@{col}@{i});
            @else:
                @for col in range(0, col_block >> 3):
                    __m256 weight@{col}@{i} = _mm256_load_ps(weight + @{col * 8 + i * col_block});
                @for row in range(0, row_block):
                    __m256 src@{row}@{i} = _mm256_set1_ps(*(src + @{row * 8 + i}));
                    @for col in range(0, col_block >> 3):
                        dst@{row + col * row_block} = _mm256_fmadd_ps(dst@{row + col * row_block}, src@{row}@{i}, weight@{col}@{i});
        src = src + src_stride;
        weight += @{8 * col_block * 4};
    }
    if (act_flag & 0x02) {
        // relu6
        __m256 relu6 = _mm256_set1_ps(6.0f);
        __m256 relu = _mm256_setzero_ps();
        @for i in range(0, row_block):
            @for j in range(0, col_block >> 3):
                dst@{i + j * row_block} = _mm256_min_ps(dst@{i + j * row_block}, relu6);
        // relu
        @for i in range(0, row_block):
            @for j in range(0, col_block >> 3):
                dst@{i + j * row_block} = _mm256_max_ps(dst@{i + j * row_block}, relu);
    }
    if (act_flag & 0x01) {
        // relu
        __m256 relu = _mm256_setzero_ps();
        @for i in range(0, row_block):
            @for j in range(0, col_block >> 3):
                dst@{i + j * row_block} = _mm256_max_ps(dst@{i + j * row_block}, relu);
    }
    @if col_block == 32:
        @for j in range(0, col_block >> 3):
            @for i in range(0, row_block):
                _mm256_store_ps(dst + @{j} * src_stride + @{i * 8}, dst@{j * row_block + i});
    @else:
        @for j in range(0, col_block >> 3):
            @for i in range(0, row_block):
                _mm256_store_ps(dst + @{j} * src_stride + @{i * 8}, dst@{j * row_block + i});
}
