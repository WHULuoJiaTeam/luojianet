/**
 * Copyright 2021 Huawei Technologies Co., Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package mindspore.fl;

message CollectiveData {
  bytes data = 1;
}

message CountRequest {
  string name = 1;
  string id = 2;
}

message CountResponse {
  bool result = 1;
  string reason = 2;
}

message CountReachThresholdRequest {
  string name = 1;
}

message CountReachThresholdResponse {
  bool is_enough = 1;
}

message ResetCounterRequest {
  string name = 1;
}

message UpdateMetadataRequest {
  string name = 1;
  bytes value = 2;
}

message GetMetadataRequest {
  string name = 1;
}

message GetMetadataResponse {
  bytes value = 1;
}

message GetOneDeviceMetaRequest {
  string fl_id = 1;
}

message GetOneDeviceMetaResponse {
  DeviceMeta device_meta = 1;
  bool found = 2;
}

enum CounterEventType {
  FIRST_CNT = 0;
  LAST_CNT = 1;
}

message CounterEvent {
  CounterEventType type = 1;
  string name = 2;
  bytes data = 3;
}

message FLId {
  string fl_id = 1;
}

message UpdateModelClientList {
  repeated string fl_id = 1;
}

message DeviceMeta {
  string fl_name = 1;
  string fl_id = 2;
  uint64 data_size = 3;
}

message FLIdToDeviceMeta {
  map<string, DeviceMeta> fl_id_to_meta = 1;
}

message UpdateModelThreshold {
  uint64 threshold = 1;
}

message ClientShares {
  map<string, SharesPb> client_secret_shares = 1;
}

message PairClientShares {
  string fl_id = 1;
  SharesPb client_shares = 2;
}

message ClientKeys {
  map<string, KeysPb> client_keys = 1;
}

message ClientNoises {
  OneClientNoises one_client_noises = 1;
}

message PairClientKeys {
  string fl_id = 1;
  KeysPb client_keys = 2;
}

message OneClientNoises {
  repeated float noise = 1;
}

message ClientShareStr {
  string fl_id = 1;
  bytes share = 2;
  int32 index = 3;
}

message SharesPb {
  repeated ClientShareStr clientsharestrs = 1;
}

message KeysPb {
  repeated bytes key = 1;
  string timestamp = 2;
  int32 iter_num = 3;
  bytes ind_iv = 4;
  bytes pw_iv = 5;
  bytes pw_salt = 6;
  bytes signature = 7;
  repeated string certificate_chain = 8;
}

message Prime {
  bytes prime = 1;
}

message PairClientListSign {
  string fl_id = 1;
  bytes signature = 2;
}

message ClientListSign {
  map<string, bytes> client_list_sign = 1;
}

message PairKeyAttestation {
  string fl_id = 1;
  string certificate = 2;
}

message KeyAttestation {
  map<string, string> key_attestations = 1;
}

message PBMetadata {
  oneof value {
    DeviceMeta device_meta = 1;
    FLIdToDeviceMeta device_metas = 2;

    FLId fl_id = 3;
    UpdateModelClientList client_list = 4;

    UpdateModelThreshold update_model_threshold = 5;

    PairClientShares pair_client_shares = 6;
    ClientShares client_shares = 7;

    PairClientKeys pair_client_keys = 8;
    ClientKeys client_keys = 9;

    OneClientNoises one_client_noises = 10;
    ClientNoises client_noises = 11;

    Prime prime = 12;

    ClientListSign client_list_sign = 13;
    PairClientListSign pair_client_list_sign = 14;

    KeyAttestation key_attestation = 15;
    PairKeyAttestation pair_key_attestation = 16;
  }
}

message PBMetadataWithName {
  string name = 1;
  PBMetadata metadata = 2;
}

message SyncIterationRequest {
  // The rank of the server which sends this synchronizing iteration request to the leader server.
  uint32 rank = 1;
}

message SyncIterationResponse {
  // The current iteration number.
  uint64 iteration = 1;
}

message PrepareForNextIterRequest {
  bool is_last_iter_valid = 2;
  string reason = 3;
  uint64 last_iteration = 4;
}

message PrepareForNextIterResponse {
  string result = 1;
}

message NotifyLeaderMoveToNextIterRequest {
  uint32 rank = 1;
  bool is_last_iter_valid = 2;
  uint64 iter_num = 3;
  string reason = 4;
}

message NotifyLeaderMoveToNextIterResponse {
  string result = 1;
}

message MoveToNextIterRequest {
  bool is_last_iter_valid = 1;
  uint64 last_iter_num = 2;
  string reason = 3;
}

message MoveToNextIterResponse {
  string result = 1;
}

message EndLastIterRequest {
  uint64 last_iter_num = 1;
}

message EndLastIterResponse {
  string result = 1;
  uint64 startFLJob_total_client_num = 2;
  uint64 startFLJob_accept_client_num = 3;
  uint64 startFLJob_reject_client_num = 4;
  uint64 updateModel_total_client_num = 5;
  uint64 updateModel_accept_client_num = 6;
  uint64 updateModel_reject_client_num = 7;
  uint64 getModel_total_client_num = 8;
  uint64 getModel_accept_client_num = 9;
  uint64 getModel_reject_client_num = 10;
  float upload_loss = 11;
}

message SyncAfterRecover {
  uint64 current_iter_num = 1;
}
