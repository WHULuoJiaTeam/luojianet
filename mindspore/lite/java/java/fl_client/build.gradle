/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.io.netifi:gradle-flatbuffers-plugin:1.0.7"
    }
}


plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

apply plugin: "io.netifi.flatbuffers"

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven {
        url "https://maven.springframework.org/release"
    }
    maven {
        url "https://maven.restlet.com"
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.14.9'
    testCompile group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '3.14.9'

    // https://mvnrepository.com/artifact/com.google.flatbuffers/flatbuffers-java
    compile group: 'com.google.flatbuffers', name: 'flatbuffers-java', version: '2.0.0'

    compile(group: 'org.bouncycastle',name: 'bcprov-jdk15on', version: '1.68')
    implementation project(':common')
    implementation project(':linux_x86')

}

def getFlatVersion(path) {
    def version = new ByteArrayOutputStream()
    def cmd = path + ' --version'
    exec {
        ExecSpec execSpec ->
            executable 'bash'
            args '-c', cmd
            standardOutput = version
    }
    return version.toString().split()[2]
}

import io.netifi.flatbuffers.plugin.tasks.FlatBuffers

flatbuffers {
    String msLib = System.getenv("MSLIBS_CACHE_PATH").toString()
    FileTree msLibTree = fileTree(dir: msLib, include: ["flatbuffers_*/bin/flatc"])
    String msLibPath = ''
    String libPath = ''
    msLibTree.find {File file ->
        libPath = file.toString()
        String version = getFlatVersion(libPath)
        if ('2.0.0' == version) {
            msLibPath = libPath
            return true
        }
    }
    if (file('../../../build/_deps/flatbuffers-src/_build/flatc').exists()) {
        String version = getFlatVersion('../../../build/_deps/flatbuffers-src/_build/flatc')
        println('version: ' + version)
        if ('2.0.0' == version) {
            flatcPath = '../../../build/_deps/flatbuffers-src/_build/flatc'
        } else {
            println('the version of build flatc is not valid, will find the other flatc')
        }
    } else if (msLibPath != '' && file(msLibPath).exists()){
        flatcPath = msLibPath
    } else {
        println("the needed flatc of version 2.0.0 is not exist, please check")
    }
    println("the used flatc path: " + flatcPath)
}

task createFlatBuffers(type: FlatBuffers) {
    inputDir = file("../../../../schema")
    outputDir = file("src/main/java/")
    language = 'java'
}


task clearJar(type: Delete) {
    delete 'build/libs/jarAAR/mindspore-lite-java-flclient.jar'
    delete 'build/libs/jarX86/mindspore-lite-java-flclient.jar'
}

archivesBaseName ='mindspore-lite-java-flclient'

task flReleaseJarAAR(type: Jar){
    manifest {
        attributes "Main-Class": "com.mindspore.flclient.SyncFLJob"
    }
    from('build/classes/java/main')
    destinationDirectory = file('build/libs/jarAAR')
}

task packFLJarX86(type: Jar){
    manifest {
        attributes "Main-Class": "com.mindspore.flclient.SyncFLJob"
    }
    from ('build/classes/java/main')
    from ('../common/build/classes/java/main')
    from ('../linux_x86/build/classes/java/main')
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it) }
    }
    destinationDirectory = file('build/libs/jarX86')
}

task flReleaseJarX86 (type:Exec, dependsOn: ['packFLJarX86']){
    commandLine "zip", "-d", "./build/libs/jarX86/mindspore-lite-java-flclient.jar",'META-INF/.SF',  'META-INF/.RSA',  'META-INF/*SF'
}
