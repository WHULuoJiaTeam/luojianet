# Builtin Configurations(DO NOT CHANGE THESE CONFIGURATIONS unless you know exactly what you are doing)
enable_modelarts: False
data_url: ""
train_url: ""
checkpoint_url: ""
data_path: "/cache/data"
output_path: "/cache/output_path"
load_path: "/cache/checkpoint_path"
device_target: GPU
enable_profiling: False

# =====================================================================================================================
# config
img_width: 1024 # 896, 960, 1024
img_height: 1024
keep_ratio: True
flip_ratio: 0.5
expand_ratio: 1.0

# anchor
anchor_scales: [8]
anchor_ratios: [0.5, 1.0, 2.0]
anchor_strides: [4, 8, 16, 32, 64]
num_anchors: 3

# resnet
resnet_block: [3, 8, 36, 3]
resnet_in_channels: [64, 256, 512, 1024]
resnet_out_channels: [256, 512, 1024, 2048]

# fpn
fpn_in_channels: [256, 512, 1024, 2048]
fpn_out_channels: 256
fpn_num_outs: 5

# rpn
rpn_in_channels: 256
rpn_feat_channels: 256
rpn_loss_cls_weight: 1.0
rpn_loss_reg_weight: 1.0
rpn_cls_out_channels: 1
rpn_target_means: [0., 0., 0., 0.]
rpn_target_stds: [1.0, 1.0, 1.0, 1.0]

# bbox_assign_sampler
neg_iou_thr: 0.3
pos_iou_thr: 0.7
min_pos_iou: 0.3
num_gts: 128
num_expected_neg: 256
num_expected_pos: 128

# proposal
activate_num_classes: 2
use_sigmoid_cls: True

# roi_align
roi_layer: {type: 'RoIAlign', out_size: 7, sample_num: 2}
roi_align_out_channels: 256
roi_align_featmap_strides: [4, 8, 16, 32]
roi_align_finest_scale: 56
roi_sample_num: 640

# bbox_assign_sampler_stage2
neg_iou_thr_stage2: 0.5
pos_iou_thr_stage2: 0.5
min_pos_iou_stage2: 0.5
num_bboxes_stage2: 2000
num_expected_pos_stage2: 128
num_expected_neg_stage2: 512
num_expected_total_stage2: 512

# rcnn
rcnn_num_layers: 2
rcnn_in_channels: 256
rcnn_fc_out_channels: 1024
rcnn_loss_cls_weight: 1
rcnn_loss_reg_weight: 1
rcnn_target_means: [0., 0., 0., 0.]
rcnn_target_stds: [0.1, 0.1, 0.2, 0.2]

# train proposal
rpn_proposal_nms_across_levels: False
rpn_proposal_nms_pre: 2000
rpn_proposal_nms_post: 2000
rpn_proposal_max_num: 2000
rpn_proposal_nms_thr: 0.7
rpn_proposal_min_bbox_size: 0


# test proposal ========================================================================================================
rpn_nms_across_levels: False
rpn_nms_pre: 1000
rpn_nms_post: 1000
rpn_max_num: 1000
rpn_nms_thr: 0.7
rpn_min_bbox_min_size: 0
test_score_thr: 0.05
test_iou_thr: 0.5
test_max_per_img: 100
test_batch_size: 1
# ======================================================================================================================

rpn_head_use_sigmoid: True
rpn_head_weight: 1.0

# LR
base_lr: 0.02
warmup_step: 500
warmup_ratio: 0.0625

# train
batch_size: 2
loss_scale: 256  # not works actually
momentum: 0.91
weight_decay: 0.00001
epoch_size: 50
run_eval: False
interval: 1
save_checkpoint: True
save_checkpoint_epochs: 5
keep_checkpoint_max: 10
save_checkpoint_path: "./output_dir/resnet152/"

# Number of threads used to process the dataset in parallel
num_parallel_workers: 8
# Parallelize Python operations with multiple worker processes
python_multiprocessing: True
mindrecord_dir: "./mini_dataset/mindrecord"

# =====================================================================================================================
# eval.py and train.py
coco_root: "/dat02/xwj/LuoJiaNET_applications/gitee_submit_version/luojianet_faster_rcnn_v1/mini_dataset"
train_data_type: "train"
val_data_type: "train"
inference_data_type: "train"

instance_set: "train.json"
coco_classes: ['background', 'ap',]
num_classes: 2
prefix: "ReDet.record_"

# train.py FasterRcnn training
run_distribute: False
dataset: "coco"  # coco
pre_trained: "./ms_pretrained_model/resnet152.ckpt"
device_id: "3"  # "0,3"
device_num: 1  # 2
rank_id: 0
image_dir: './mini_dataset/train/'
anno_path: './mini_dataset/train.json'  # train_redet.json
backbone: 'resnet_v1_152'

# =====================================================================================================================
# eval.py FasterRcnn evaluation
eval_anno_path: "./mini_dataset/train.json"
eval_checkpoint_path: "/dat02/xwj/LuoJiaNET_applications/faster_rcnn/output_dir/resnet152_tianzhi_1024_all_retrain_pynative/ckpt_0/faster_rcnn-50_1126.ckpt"
eval_save_dir: './eval_results/debug'
# =====================================================================================================================
# inference.py FasterRcnn evaluation
inference_save_dir: './inference_results/faster_rcnn_152_2_epoch35/'
inference_img_dir: '/dat02/hhb/datasets/tianzhi/val/'  # './examples/inference_images/'
inference_checkpoint_path: "/dat02/xwj/LuoJiaNET_applications/faster_rcnn/output_dir/resnet152_tianzhi_1024_all_retrain_pynative/ckpt_0/faster_rcnn-50_1126.ckpt"
inference_img_height: 4096
inference_img_width: 4096
# =====================================================================================================================

# export.py fasterrcnn_export
file_name: "faster_rcnn"
file_format: "AIR"
ckpt_file: "/cache/train/fasterrcnn/faster_rcnn-12_7393.ckpt"

# postprocess ("./src/config_50.yaml")
#ann_file: ''
result_path: ''

---
# Config description for each option
enable_modelarts: 'Whether training on modelarts, default: False'
data_url: 'Dataset url for obs'
train_url: 'Training output url for obs'
data_path: 'Dataset path for local'
output_path: 'Training output path for local'
result_dir: "result files path."
label_dir: "image file path."

device_target: "device where the code will be implemented, default is Ascend"
file_name: "output file name."
dataset: "Dataset, either cifar10 or imagenet2012"
parameter_server: 'Run parameter server train'
width: 'input width'
height: 'input height'
enable_profiling: 'Whether enable profiling while training, default: False'
only_create_dataset: 'If set it true, only create Mindrecord, default is false.'
run_distribute: 'Run distribute, default is false.'
do_train: 'Do train or not, default is true.'
do_eval: 'Do eval or not, default is false.'
pre_trained: 'Pretrained checkpoint path'
device_id: 'Device id, default is 0.'
device_num: 'Use device nums, default is 1.'
rank_id: 'Rank id, default is 0.'
file_format: 'file format'
eval_ann_file: "Ann file, default is val.json."
eval_checkpoint_path: "Checkpoint file path."
ckpt_file: 'fasterrcnn ckpt file.'
result_path: "result file path."
backbone: "backbone network name, options:resnet_v1_50, resnet_v1.5_50, resnet_v1_101, resnet_v1_152"
interval: "val interval"

---
device_target: ['Ascend', 'GPU', 'CPU']
file_format: ["AIR", "ONNX", "MINDIR"]
dataset_name: ["cifar10", "imagenet2012"]